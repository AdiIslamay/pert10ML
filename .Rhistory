runExample("01_hello")
runExample("01_hello")
source('D:/MyStudy/SEMESTER 4/SESUDAH UTS/MACHINE LEARNING/PERT 10/portofolioku/app.R')
source('D:/MyStudy/SEMESTER 4/SESUDAH UTS/MACHINE LEARNING/PERT 10/portofolioku/app.R', echo=TRUE)
source('D:/MyStudy/SEMESTER 4/SESUDAH UTS/MACHINE LEARNING/PERT 10/portofolioku/app.R', echo=TRUE)
source('D:/MyStudy/SEMESTER 4/SESUDAH UTS/MACHINE LEARNING/PERT 10/portofolioku/app.R', echo=TRUE)
source('D:/MyStudy/SEMESTER 4/SESUDAH UTS/MACHINE LEARNING/PERT 10/portofolioku/app.R', echo=TRUE)
source('D:/MyStudy/SEMESTER 4/SESUDAH UTS/MACHINE LEARNING/PERT 10/portofolioku/app.R', echo=TRUE)
source('D:/MyStudy/SEMESTER 4/SESUDAH UTS/MACHINE LEARNING/PERT 10/portofolioku/app.R', echo=TRUE)
source('D:/MyStudy/SEMESTER 4/SESUDAH UTS/MACHINE LEARNING/PERT 10/portofolioku/app.R', echo=TRUE)
source('D:/MyStudy/SEMESTER 4/SESUDAH UTS/MACHINE LEARNING/PERT 10/portofolioku/app.R', echo=TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source('D:/MyStudy/SEMESTER 4/SESUDAH UTS/MACHINE LEARNING/PERT 10/portofolioku/app.R', echo=TRUE)
source('D:/MyStudy/SEMESTER 4/SESUDAH UTS/MACHINE LEARNING/PERT 10/portofolioku/app.R', echo=TRUE)
source('D:/MyStudy/SEMESTER 4/SESUDAH UTS/MACHINE LEARNING/PERT 10/portofolioku/app.R', echo=TRUE)
source('D:/MyStudy/SEMESTER 4/SESUDAH UTS/MACHINE LEARNING/PERT 10/portofolioku/app.R', echo=TRUE)
source('D:/MyStudy/SEMESTER 4/SESUDAH UTS/MACHINE LEARNING/PERT 10/portofolioku/app.R', echo=TRUE)
source('D:/MyStudy/SEMESTER 4/SESUDAH UTS/MACHINE LEARNING/PERT 10/portofolioku/app.R', echo=TRUE)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
source('D:/MyStudy/SEMESTER 4/SESUDAH UTS/MACHINE LEARNING/PERT 10/portofolioku/app.R', echo=TRUE)
runApp()
runApp()
source('D:/MyStudy/SEMESTER 4/SESUDAH UTS/MACHINE LEARNING/PERT 10/portofolioku/app.R', echo=TRUE)
shiny::runApp()
library(shiny)
library(semantic.dashboard)
ui <- dashboardPage(
dashboardHeader(
color = "green", inverted = TRUE
),
dashboardSidebar(
size = "wide",
sidebarMenu(
menuItem(tabName = "submenu1", text = "subMenu 1"),
menuItem(tabName = "submenu2", text = "subMenu 2"),
)
),
dashboardBody(
tabItems(
selected = 1,
tabItem(
tabName = "submenu1",
textOutput(outputId = "submenu1")
),
tabItem(
tabName = "submenu2",
textOutput(outputId = "submenu2")
),
)
)
)
server <- function(input, output) {
output$submenu1 <- renderText("ISI BODY 1")
output$submenu2 <- renderText("ISI BODY 2")
}
shinyApp(ui, server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source('D:/MyStudy/SEMESTER 4/SESUDAH UTS/MACHINE LEARNING/PERT 10 - R Studio Dashboard/portofolioku/app.R', echo=TRUE)
# Put them together into a dashboardPage
dashboardPage(
dashboardHeader(title = "Simple tabs"),
sidebar,
body
)
source('D:/MyStudy/SEMESTER 4/SESUDAH UTS/MACHINE LEARNING/PERT 10 - R Studio Dashboard/portofolioku/app.R', echo=TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
library(RColorBrewer)
detach("package:RColorBrewer", unload = TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
